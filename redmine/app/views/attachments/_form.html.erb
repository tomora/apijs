<% #<?
# Created S/06/09/2014
# Updated M/08/11/2016
#
# Copyright 2008-2017 | Fabrice Creuzot (luigifab) <code~luigifab~info>
# https://redmine.luigifab.info/projects/redmine/wiki/apijs
#
# This program is free software, you can redistribute it or modify
# it under the terms of the GNU General Public License (GPL) as published
# by the free software foundation, either version 2 of the license, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but without any warranty, without even the implied warranty of
# merchantability or fitness for a particular purpose. See the
# GNU General Public License (GPL) for more details.

if (@issue)
  type = 'Issue'
  id = @issue.id
elsif (@page)
  type = 'Wiki'
  id = @page.id
elsif (@news)
  type = 'News'
  id = @news.id
end

if (Setting.plugin_redmine_apijs['enabled'] == '1' && id)
  url = url_for({ :only_path => true, :controller => 'apijs', :action => 'uploadzip' })
  url += '?type=' + type + '&amp;id=' + id.to_s
  maxsize = 500 # Setting.attachment_max_size.to_i / 1024
%>
	<button type="button" onclick="apijsSendZip('<%= raw url %>', '<%= form_authenticity_token %>', <%= maxsize %>);" style="float:right;"><%= l(:apijs_zip_button) %></button>
<% end %>

<% if Redmine::VERSION.to_s.gsub('.','').to_i < 230 %>

	<% if defined?(container) && container && container.saved_attachments %>
		<% container.saved_attachments.each_with_index do |attachment, i| %>
			<span class="icon icon-attachment" style="display:block; line-height:1.5em;">
				<%= h(attachment.filename) %> (<%= number_to_human_size(attachment.filesize) %>)
				<%= hidden_field_tag "attachments[p#{i}][token]", "#{attachment.id}.#{attachment.digest}" %>
			</span>
		<% end %>
	<% end %>
	<span id="attachments_fields">
		<span>
			<%= file_field_tag 'attachments[1][file]', :size => 30, :id => nil, :class => 'file',
				:onchange => "checkFileSize(this, #{Setting.attachment_max_size.to_i.kilobytes}, '#{escape_javascript(l(:error_attachment_too_big, :max_size => number_to_human_size(Setting.attachment_max_size.to_i.kilobytes)))}');"  -%>
			<%= text_field_tag 'attachments[1][description]', '', :id => nil, :class => 'description', :maxlength => 255, :placeholder => l(:label_optional_description) %>
			<%= link_to_function(image_tag('delete.png'), 'removeFileField(this)', :title => (l(:button_delete))) %>
		</span>
	</span>
	<span class="add_attachment"><%= link_to l(:label_add_another_file), '#', :onclick => 'addFileField(); return false;', :class => 'add_attachment' %>
	(<%= l(:label_max_size) %>: <%= number_to_human_size(Setting.attachment_max_size.to_i.kilobytes) %>)</span>

<% else %>

	<span id="attachments_fields">
	<% if defined?(container) && container && container.saved_attachments %>
		<% container.saved_attachments.each_with_index do |attachment, i| %>
			<span id="attachments_p<%= i %>">
				<%= text_field_tag("attachments[p#{i}][filename]", attachment.filename, :class => 'filename') +
				text_field_tag("attachments[p#{i}][description]", attachment.description, :maxlength => 255, :placeholder => l(:label_optional_description), :class => 'description') +
				link_to('&nbsp;'.html_safe, attachment_path(attachment, :attachment_id => "p#{i}", :format => 'js'), :method => 'delete', :remote => true, :class => 'remove-upload') %>
				<%= hidden_field_tag "attachments[p#{i}][token]", "#{attachment.token}" %>
			</span>
		<% end %>
	<% end %>
	</span>
	<span class="add_attachment">
		<%= file_field_tag 'attachments[dummy][file]', :id => nil, :class => 'file_selector', :multiple => true,
		:onchange => 'addInputFiles(this);', :data => {
			:max_file_size => Setting.attachment_max_size.to_i.kilobytes,
			:max_file_size_message => l(:error_attachment_too_big, :max_size => number_to_human_size(Setting.attachment_max_size.to_i.kilobytes)),
			:max_concurrent_uploads => Redmine::Configuration['max_concurrent_ajax_uploads'].to_i,
			:upload_path => uploads_path(:format => 'js'),
			:description_placeholder => l(:label_optional_description)
		} %>
		(<%= l(:label_max_size) %>: <%= number_to_human_size(Setting.attachment_max_size.to_i.kilobytes) %>)
	</span>
	<% content_for :header_tags do %>
		<%= javascript_include_tag 'attachments' %>
	<% end %>

<% end %>